--@PREFIX@instructionBasic
module instructionBasic where

open import Data.Nat  hiding (_≤_)
open import Data.List hiding (_++_)
open import Data.Unit  hiding (_≤_)
open import Data.Empty
open import Data.Bool  hiding (_≤_ ; if_then_else_ ) renaming (_∧_ to _∧b_ ; _∨_ to _∨b_ ; T to True)
open import Data.Bool.Base hiding (_≤_ ; if_then_else_ ) renaming (_∧_ to _∧b_ ; _∨_ to _∨b_ ; T to True)
--@BEGIN@test
open import Data.Product renaming (_,_ to _,,_ )
open import Data.Nat.Base hiding (_≤_)
open import Data.List.NonEmpty hiding (head)

open import libraries.listLib
open import libraries.natLib
open import libraries.boolLib
open import libraries.andLib
open import libraries.miscLib
open import libraries.maybeLib

open import stack
open import basicBitcoinDataType

--@END

--list with normal instructions
--@BEGIN@instrbasic
data InstructionBasic : Set where
  opEqual opAdd opSub opVerify opEqualVerify opDrop opSwap opDup    : InstructionBasic
  opHash opMultiSig opCHECKLOCKTIMEVERIFY opCheckSig3 opCheckSig    : InstructionBasic
  opPush                                                            : ℕ → InstructionBasic
--@END

{-
data InstructionBasic : Set where
  opEqual  : InstructionBasic
  opAdd    : InstructionBasic
  opPush   : ℕ → InstructionBasic
  opSub    : InstructionBasic
  opVerify : InstructionBasic
  opCheckSig : InstructionBasic
  opEqualVerify : InstructionBasic
  opDup : InstructionBasic
  opDrop :  InstructionBasic
  opSwap  : InstructionBasic
  opHash : InstructionBasic
  opCHECKLOCKTIMEVERIFY : InstructionBasic
  opCheckSig3 : InstructionBasic
  opMultiSig : InstructionBasic
-}




BitcoinScriptBasic : Set
BitcoinScriptBasic  = List InstructionBasic
